package lc0051

import (
	"fmt"
	"regexp"
	"sort"
	"strings"
	"testing"
)

func TestSolveNQueens(t *testing.T) {
	tests := []struct {
		input int
		want  string
	}{
		{
			input: 4,
			want:  `[[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]`,
		},
		{
			input: 1,
			want:  `[["Q"]]`,
		},
		{
			input: 7,
			want: `
[
	[
		"Q......",
		"..Q....",
		"....Q..",
		"......Q",
		".Q.....",
		"...Q...",
		".....Q."
	],
	[
		"Q......",
		"...Q...",
		"......Q",
		"..Q....",
		".....Q.",
		".Q.....",
		"....Q.."
	],
	[
		"Q......",
		"....Q..",
		".Q.....",
		".....Q.",
		"..Q....",
		"......Q",
		"...Q..."
	],
	[
		"Q......",
		".....Q.",
		"...Q...",
		".Q.....",
		"......Q",
		"....Q..",
		"..Q...."],
	[
		".Q.....",
		"...Q...",
		"Q......",
		"......Q",
		"....Q..",
		"..Q....",
		".....Q."],
	[
		".Q.....",
		"...Q...",
		".....Q.",
		"Q......",
		"..Q....",
		"....Q..",
		"......Q"],
	[
		".Q.....",
		"....Q..",
		"Q......",
		"...Q...",
		"......Q",
		"..Q....",
		".....Q."],
	[
		".Q.....",
		"....Q..",
		"..Q....",
		"Q......",
		"......Q",
		"...Q...",
		".....Q."],
	[
		".Q.....",
		"....Q..",
		"......Q",
		"...Q...",
		"Q......",
		"..Q....",
		".....Q."],
	[
		".Q.....",
		".....Q.",
		"..Q....",
		"......Q",
		"...Q...",
		"Q......",
		"....Q.."],
	[
		".Q.....",
		"......Q",
		"....Q..",
		"..Q....",
		"Q......",
		".....Q.",
		"...Q..."],
	[
		"..Q....",
		"Q......",
		".....Q.",
		".Q.....",
		"....Q..",
		"......Q",
		"...Q..."],
	[
		"..Q....",
		"Q......",
		".....Q.",
		"...Q...",
		".Q.....",
		"......Q",
		"....Q.."],
	[
		"..Q....",
		"....Q..",
		"......Q",
		".Q.....",
		"...Q...",
		".....Q.",
		"Q......"],
	[
		"..Q....",
		".....Q.",
		".Q.....",
		"....Q..",
		"Q......",
		"...Q...",
		"......Q"],
	[
		"..Q....",
		"......Q",
		".Q.....",
		"...Q...",
		".....Q.",
		"Q......",
		"....Q.."],
	[
		"..Q....",
		"......Q",
		"...Q...",
		"Q......",
		"....Q..",
		".Q.....",
		".....Q."],
	[
		"...Q...",
		"Q......",
		"..Q....",
		".....Q.",
		".Q.....",
		"......Q",
		"....Q.."],
	[
		"...Q...",
		"Q......",
		"....Q..",
		".Q.....",
		".....Q.",
		"..Q....",
		"......Q"],
	[
		"...Q...",
		".Q.....",
		"......Q",
		"....Q..",
		"..Q....",
		"Q......",
		".....Q."],
	[
		"...Q...",
		".....Q.",
		"Q......",
		"..Q....",
		"....Q..",
		"......Q",
		".Q....."],
	[
		"...Q...",
		"......Q",
		"..Q....",
		".....Q.",
		".Q.....",
		"....Q..",
		"Q......"],
	[
		"...Q...",
		"......Q",
		"....Q..",
		".Q.....",
		".....Q.",
		"Q......",
		"..Q...."],
	[
		"....Q..",
		"Q......",
		"...Q...",
		"......Q",
		"..Q....",
		".....Q.",
		".Q....."],
	[
		"....Q..",
		"Q......",
		".....Q.",
		"...Q...",
		".Q.....",
		"......Q",
		"..Q...."],
	[
		"....Q..",
		".Q.....",
		".....Q.",
		"..Q....",
		"......Q",
		"...Q...",
		"Q......"],
	[
		"....Q..",
		"..Q....",
		"Q......",
		".....Q.",
		"...Q...",
		".Q.....",
		"......Q"],
	[
		"....Q..",
		"......Q",
		".Q.....",
		"...Q...",
		".....Q.",
		"Q......",
		"..Q...."],
	[
		"....Q..",
		"......Q",
		".Q.....",
		".....Q.",
		"..Q....",
		"Q......",
		"...Q..."],
	[
		".....Q.",
		"Q......",
		"..Q....",
		"....Q..",
		"......Q",
		".Q.....",
		"...Q..."],
	[
		".....Q.",
		".Q.....",
		"....Q..",
		"Q......",
		"...Q...",
		"......Q",
		"..Q...."],
	[
		".....Q.",
		"..Q....",
		"Q......",
		"...Q...",
		"......Q",
		"....Q..",
		".Q....."],
	[
		".....Q.",
		"..Q....",
		"....Q..",
		"......Q",
		"Q......",
		"...Q...",
		".Q....."],
	[
		".....Q.",
		"..Q....",
		"......Q",
		"...Q...",
		"Q......",
		"....Q..",
		".Q....."],
	[
		".....Q.",
		"...Q...",
		".Q.....",
		"......Q",
		"....Q..",
		"..Q....",
		"Q......"],
	[
		".....Q.",
		"...Q...",
		"......Q",
		"Q......",
		"..Q....",
		"....Q..",
		".Q....."],
	[
		"......Q",
		".Q.....",
		"...Q...",
		".....Q.",
		"Q......",
		"..Q....",
		"....Q.."],
	[
		"......Q",
		"..Q....",
		".....Q.",
		".Q.....",
		"....Q..",
		"Q......",
		"...Q..."],
	[
		"......Q",
		"...Q...",
		"Q......",
		"....Q..",
		".Q.....",
		".....Q.",
		"..Q...."],
	[
		"......Q",
		"....Q..",
		"..Q....",
		"Q......",
		".....Q.",
		"...Q...",
		".Q....."]]`,
		},
	}
	for i, tt := range tests {
		t.Run(fmt.Sprintf("%d", i), func(t *testing.T) {
			got := solveNQueens(tt.input)
			result := sprintResult(got)
			want := regexp.MustCompile(`\s+`).ReplaceAllString(tt.want, "")
			if want != result {
				t.Fatalf("expect %s, got %s", tt.want, result)
			}
		})
	}
}

func sprintResult(result [][]string) string {
	square := make([]string, 0, len(result))
	for _, s := range result {
		square = append(square, fmt.Sprintf(`["%s"]`, strings.Join(s, `","`)))
	}
	sort.Slice(square, func(i, j int) bool {
		return strings.Compare(square[i], square[j]) >= 0
	})
	return fmt.Sprintf("[%s]", strings.Join(square, ","))
}
